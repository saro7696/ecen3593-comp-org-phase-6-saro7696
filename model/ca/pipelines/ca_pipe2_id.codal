/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {

        // Set local stall.
        s_id_stall = 0;

        // rff1 control
        if((r_wb_rd == s_id_src1) and (r_wb_rd != 0) and (r_wb_regwrite)){
            s_rff1_sel = 0;
        }
        else{
            s_srff1_sel = 1;
        }
        // rff2 control
        if((r_wb_rd == s_id_src2) and (r_wb_rd != 0) and (r_wb_regwrite)){
            s_rff2_sel = 0;
        }
        else{
            s_srff2_sel = 1;
        }

        switch (s_rff1_sel) {
            case 0:
                r_id_rff1src = r_wb_alu;
                break;
            case 1:
                r_ex_src1 = s_id_reg1;
                break;
            default:
                r_id_rff1src = 0;
                break;
        }

        switch (s_rff2_sel) {
            case 0:
                r_id_rff2src = r_wb_alu;
                break;
            case 1:
                r_id_rff2src = s_id_reg2;
                break;
            default:
                r_id_rff2src = 0;
                break;
        }

        // Decoder activation
        dec(s_id_opc);

        // Update the registers
        id_output();
    };
};
event id_output : pipeline(pipe.ID)
{

    semantics
    {
        // -----------------------------------------------------------------------------------------
        // Pipeline output
        // -----------------------------------------------------------------------------------------

        uint32 id_instr_temp;
        bool cache_ready, cache_response;
        

        if_code.transport(CP_PHS_DATA, cache_ready, cache_response, id_instr_temp);

        s_id_instr = r_id_clear? NOP_INSTRUCTION: id_instr_temp;

        // OPCODE
        s_id_opc = s_id_instr[31..25] :: s_id_instr[14..12] :: s_id_instr[6..0];

        // First Source Reg
        s_id_rs1 = s_id_instr [19..15];
        // Second source register
        s_id_rs2 = s_id_instr [24..20];
        // Destination register
        s_id_rd = s_id_instr [11..7];
        // Immediate decode
        s_id_immed = ( int32 ) ( int12 ) s_id_instr [31..20]; // I-type Immediate

        // Read Input Registers
        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];

        // Register Assignments
        r_ex_pc = r_id_pc;

        r_ex_immed = s_id_immed;
        r_ex_rd = s_id_rd;
        r_ex_reg1 = r_id_rff1src;
        r_ex_reg2 = r_id_rff2src;
        r_ex_instr = s_id_instr;
        r_ex_aluop = s_id_aluop;
        r_ex_alusrc2 = s_id_alusrc2;
        r_ex_regwrite = s_id_regwrite;
        r_ex_halt = s_id_halt;

        r_ex_src2 = r_ex_reg2;
        r_ex_src1 = r_ex_reg1;
    };
};
