/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;

    semantics
    {

        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt Instructions Indicated");
        }

        // Timing
        ex_output();
    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        // rff1 control
        if((r_me_rd == s_ex_src1) and (r_me_rd != 0) and (r_me_regwrite)){
            s_ex_fwdA_sl = 2;
            s_ex_fwdAsel = r_me_alu;
        }
        else if((r_wb_rd == s_ex_src1) and (r_wb_rd != 0) and (r_wb_regwrite)){
            s_ex_fwdA_sl = 1;
            s_ex_fwdAsel = r_wb_alu;
        }
        else{
            s_ex_fwdA_sl = 0;
            s_ex_fwdAsel = s_ex_src1;
        }
        // rff2 control
        if((r_me_rd == s_ex_src2) and (r_me_rd != 0) and (r_me_regwrite)){
            s_ex_fwdB_sl = 2;
            
        }
        else if((r_wb_rd == s_ex_src2) and (r_wb_rd != 0) and (r_wb_regwrite)){
            s_ex_fwdB_sl = 1;
            
        }
        else{
            s_ex_fwdB_sl = 0;
            
        }

        switch (s_ex_fwdA_sl) {
            case 1:
                s_ex_fwdAsel = r_wb_alu;
                break;
            case 2:
                s_ex_fwdAsel = r_me_alu;
                break;
            default:
                s_ex_fwdAsel = s_ex_src1;
                break;
        }

        switch (s_ex_fwdB_sl) {
            case 1:
                s_ex_fwdBsel = r_wb_alu;
                break;
            case 2:
                s_ex_fwdBsel = r_me_alu;
                break;
            default:
                s_ex_fwdBsel = s_ex_src2;
                break;
        }


        switch ( r_ex_alusrc2 )
        {
            case ALU2_REG :
                s_ex_src2 = r_ex_reg2 ;
                break ;
            case ALU2_IMM :
                s_ex_src2 = r_ex_immed ;
                break ;
            default :
                s_ex_src2 = 0;
                codasip_fatal (SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break ;
        }

        switch ( r_ex_aluop )
        {
            // Nop
            case ALU_NOP :
                s_ex_alu = 0;
                break ;
            // add or addi
            case ALU_ADD:
                s_ex_alu = r_ex_reg1 + s_ex_src2;
                break ;
            default:
                s_ex_alu = 0;
                codasip_fatal(ALU_ERROR, "Default case: %d\n", s_ex_alu);
        }

        

        // Register Assignment   
        r_me_pc = r_ex_pc;
        r_me_rd = r_ex_rd;
        r_me_regwrite = r_ex_regwrite;
        r_me_instr = r_ex_instr;
        r_me_alu = s_ex_alu;
    };
};
